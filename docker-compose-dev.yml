version: '3.9'
services:
  lumhub:
    container_name: LumHub-APP
    build:
      context: ./APP/LumHub
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=3000
    networks:
      - nginx
    expose:
        - "3000"
    labels:
        - "group=webapp"
        - "security=high"

  account-database:
    container_name: Account-Database
    image: postgres:latest
    restart: unless-stopped
    environment:
      - POSTGRES_DB=account
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: pg_isready -U ${DB_USER} -d account
      timeout: 10s
      interval: 3s
      start_period: 5s
      retries: 10
    networks:
      - database-services
    labels:
      - "service=account"
      - "group=database-microservices"
      - "security=high"

  account:
    container_name: Account-API
    build:
      context: ./API/Account
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=account-database
      - DB_PORT=5432
      - DB_NAME=account
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      account-database:
        condition: service_healthy
    networks:
      - database-services
      - nginx
    expose:
      - "5000"
    labels:
      - "service=account"
      - "group=api-microservices"
      - "security=high"

  nginx-http:
    container_name: Server-NGINX-HTTP
    image: nginx:alpine
    restart: unless-stopped
    configs:
      - source: nginx-http
        target: /etc/nginx/conf.d/default.conf
    ports:
      - "80:80"
    networks:
      - nginx
      - monitoring
    depends_on:
      lumhub:
        condition: service_started
      account:
        condition: service_healthy
      grafana:
        condition: service_healthy
    links:
      - lumhub
      - account
      - grafana
    labels:
      - "group=reverse-proxy"
      - "security=high"

  node-exporter:
    container_name: Node-exporter
    image: prom/node-exporter:latest
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - monitoring
    labels:
      - "group=monitoring"
      - "security=high"

  prometheus:
    container_name: Prometheus
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./docker/dev/monitor/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - 9090
    networks:
      - monitoring
    links:
      - node-exporter
    depends_on:
      node-exporter:
        condition:
    labels:
      - "group=monitoring"
      - "security=high"

  grafana-database:
    container_name: Grafana-database
    image: postgres:latest
    restart: unless-stopped
    environment:
      - POSTGRES_DB=grafana
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5433:5432"
    healthcheck:
      test: pg_isready -U ${DB_USER} -d grafana
      timeout: 10s
      interval: 3s
      start_period: 5s
      retries: 10
    networks:
      - monitoring
    labels:
      - "group=database-monitoring"
      - "security=high"

  grafana:
    container_name: Grafana
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${DOMAIN}
      - GF_SERVER_ROOT_URL=https://${DOMAIN}/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SERVER_ENABLE_GZIP=true
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=grafana-database
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=${DB_USER}
      - GF_DATABASE_PASSWORD=${DB_PASSWORD}
      - GF_DATABASE_LOG_QUERIES=true
      - GF_DATABASE_ANALYTICS_REPORTING_ENABLED=false
      - GF_DATABASE_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_SECURITY_ADMIN_EMAIL=${EMAIL}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_COOKIE_SECURE=true
      - GF_DASHBOARDS_MIN_REFRESH_INTERVAL=1s
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/node-exporter.json
      - GF_LOG_MODE=file
      - GF_LOG_LEVEL=critical
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost:3000 || exit 1
      start_period: 10s
      interval: 5s
      retries: 3
    depends_on:
      grafana-database:
        condition: service_healthy
    expose:
      - "3000"
    volumes:
      - ./docker/dev/monitor/grafana/dashboards:/var/lib/grafana/dashboards
      - ./docker/dev/monitor/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring
      - nginx
    links:
      - grafana-database
    labels:
      - "group=monitoring"
      - "security=high"

networks:
  nginx:
    driver: bridge
  database-services:
    driver: bridge
  monitoring:
    driver: bridge

configs:
  nginx-http:
    file: docker/dev/nginx/nginx-http.conf
  prometheus:
    file: docker/dev/monitor/prometheus/prometheus.yml

volumes:
  prometheus_data:
